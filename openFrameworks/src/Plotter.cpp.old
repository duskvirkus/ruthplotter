#include "Plotter.h"

Plotter::Plotter() {}

void Plotter::setup() {
  serial.setup(0, 9600);

  start();
}

void Plotter::update() {
  if (serial.available() >= 4) {
    vector<byte> reply;

    while (serial.available() > 0) {
      reply.emplace_back(serial.readByte());
    }

    std::string s = "";
    for (int i = 0; i < 4; ++i) {
      s += static_cast<char>(reply[i]);
    }

    if (s == "done") {
      cout << "command compleate" << '\n';
      ready = true;
    }

    // handle error
  }

  if (ready && codeQueue.size() > 0) {
    const vector<byte> line = codeQueue.pop_front();
    cout << "sending " << codeQueue.pop_front() << '\n';
  }
}

void Plotter::home() {
  vector<byte> line;
  addCommand(line, "home");
  addPadding(line, 8);
  codeQueue.emplace_back(line);
}

void Plotter::move(ofPoint) {}

void Plotter::move(float, float) {}

void Plotter::mark(ofPoint) {}

void Plotter::mark(float, float) {}

void Plotter::start() {}

void Plotter::send(vector<byte>) {}

void Plotter::addCommand(vector<byte>, std::string) {}

void Plotter::addPadding(vector<byte>, int) {}

void Plotter::addUInt16(vector<byte>, u_int16_t) {}

void Plotter::addFloat32(vector<byte>, float) {}
